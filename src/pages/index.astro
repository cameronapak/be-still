---
import { Icon } from "astro-iconify";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Room">
  <main x-data="room" class="relative text-white text-opacity-80 h-full min-h-screen container max-w-md mx-auto py-12">
    <div class="flex justify-between items-center gap-3">
      <h1 class="text-white text-opacity-80 m-0 p-0 line-clamp-1">Quiet Time Together</h1>

      <!-- Add Settings Button -->
      <button class="btn btn-ghost btn-circle" @click="$refs.settingsModalEl.showModal()">
        <Icon pack="lucide" name="settings-2" class="h-6 w-6" />
      </button>
    </div>

    <!-- Add Modal -->
    <dialog
      id="settingsModal"
      x-ref="settingsModalEl"
      x-init="$el.showModal()"
      class="modal modal-bottom sm:modal-middle"
    >
      <div class="modal-box bg-cyan-900">
        <h3 class="font-bold text-xl mb-4 text-white">Welcome here! 👋</h3>
        <div class="space-y-4 mt-4">
          <div>
            <label class="block mb-2">What's your name?</label>
            <input
              type="text"
              x-init="$el.value = myName || ''"
              @input.debounce.500ms="validateName($el.value)"
              :class="{'input-error': nameError}"
              class="input input-bordered w-full bg-white bg-opacity-10"
            />
            <div x-show="nameError" class="text-error text-sm mt-1" x-text="nameError"></div>
          </div>
          <div>
            <label class="block mb-2">How are you showing up today?</label>
            <select
              x-model="myPresence.emoji"
              @change="updateEmoji()"
              class="select select-bordered w-full bg-white bg-opacity-10"
            >
              <optgroup label="Spiritual Disciplines">
                <template x-for="option in emojiOptions.spiritualDisciplines" :key="option.value">
                  <option :value="option.value" x-text="`${option.value} ${option.label}`"></option>
                </template>
              </optgroup>
              <optgroup label="Feelings">
                <template x-for="option in emojiOptions.feelings" :key="option.value">
                  <option :value="option.value" x-text="`${option.value} ${option.label}`"></option>
                </template>
              </optgroup>
            </select>
          </div>
        </div>
        <div class="modal-action">
          <button class="btn" @click="startQuietTime()">Start Quiet Time</button>
        </div>
      </div>
      <form method="dialog" class="modal-backdrop">
        <button>close</button>
      </form>
    </dialog>

    <div class="avatar-circle-container" id="avatar-container">
      <template x-for="(user, index) in users" :key="user.connectionId">
        <div class="avatar-item" :style="getPositionStyle(index, users.length + 1)">
          <div
            class="tooltip tooltip-bottom animation-gentle-pulse"
            x-bind:data-tip="getTooltipText(user.presence.emoji, user.presence.name)"
          >
            <div class="emoji-avatar" x-text="user.presence.emoji || '😌'"></div>
          </div>
        </div>
      </template>
      <div
        @click="$refs.settingsModalEl.showModal()"
        class="avatar-item bg-white bg-opacity-50 rounded-full cursor-pointer"
        aria-role="button"
        :style="getPositionStyle(users.length, users.length + 1)"
      >
        <div
          class="tooltip tooltip-bottom animation-gentle-pulse"
          x-bind:data-tip="getTooltipText(myPresence.emoji, myName)"
        >
          <div class="emoji-avatar" x-text="myPresence.emoji || '😌'"></div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import Alpine from "alpinejs";
  import PartySocket from "partysocket";

  document.addEventListener("alpine:init", () => {
    Alpine.data("room", function () {
      return {
        emojiOptions: {
          spiritualDisciplines: [
            { value: "🙏", label: "Praying" },
            { value: "📖", label: "Reading Scripture" },
            { value: "🙌", label: "Praising" },
            { value: "🤲", label: "Praying for Others" },
            { value: "💭", label: "Reflecting" },
            { value: "🎵", label: "Worshiping" },
            { value: "🕯️", label: "Meditating" },
            { value: "🧘", label: "Being Still" },
            { value: "🤗", label: "Practicing Gratitude" }
          ],
          feelings: [
            { value: "😌", label: "Content" },
            { value: "😊", label: "Peaceful" },
            { value: "🥺", label: "Seeking" },
            { value: "😢", label: "Grieving" },
            { value: "😇", label: "Grateful" },
            { value: "✨", label: "Blessed" }
          ]
        },
        nameError: "",
        async validateName(name: string) {
          if (!name) {
            this.nameError = "";
            return;
          }

          try {
            const response = await fetch("/api/groq.json", {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ name })
            });

            if (response.status === 429) {
              this.nameError = "Too many requests. Please try again later.";
              return;
            }

            const data = await response.json();

            if (!data.isAppropriate) {
              this.nameError = data.message;
              this.myName = ""; // Clear invalid name
            } else {
              this.nameError = "";
              this.myName = name;
            }
          } catch (error) {
            console.error("Name validation error:", error);
            // Fallback to basic validation if API check fails
            if (name.length < 2 || name.length > 48) {
              this.nameError = "Name must be between 2 and 48 characters";
              this.myName = "";
            }
          }
        },
        startQuietTime() {
          if (this.nameError) {
            return;
          }
          (this.$refs.settingsModalEl as HTMLDialogElement).close();
        },
        // @ts-ignore
        myName: this.$persist(""),
        getTooltipText(emoji: string, name: string) {
          let text =
            this.emojiOptions.feelings.find((option: { value: string; label: string }) => option.value === emoji)
              ?.label ||
            this.emojiOptions.spiritualDisciplines.find(
              (option: { value: string; label: string }) => option.value === emoji
            )?.label ||
            "";
          if (name && text) {
            text = `${name} is ${text}`;
          } else if (name && !text) {
            text = name;
          }
          return text;
        },
        setupRoom() {
          const socket = new PartySocket({
            host: import.meta.env.DEV ? "localhost:1999" : "https://freedom-stack-party.cameronapak.partykit.dev",
            room: "prayer-room",
            party: "main",
            connectionTimeout: 3600000 // 1 hour in milliseconds
          });

          socket.addEventListener("error", (event) => {
            console.error("WebSocket error:", event);
          });

          socket.addEventListener("close", (event) => {
            console.log("WebSocket closed:", event.code, event.reason);
            setTimeout(() => this.socket?.reconnect(), 3000);
          });

          socket.addEventListener("message", (event: any) => {
            try {
              const data = JSON.parse(event.data);
              if (data.type === "state_update") {
                const otherUsers = data.users.filter(
                  (user: any) => user.connectionId !== socket.id
                );
                this.setUsers(otherUsers);
              }
            } catch (error) {
              console.error("Error parsing message:", error);
            }
          });

          this.socket = socket;
          this.myPresence = { emoji: "😌", name: "" };

          // Send initial presence when connected
          socket.addEventListener("open", () => {
            this.sendPresence();
          });
        },
        socket: null as PartySocket | null,
        myPresence: { emoji: "😌", name: "" },
        updateEmoji() {
          this.sendPresence();
        },
        users: [] as any[],
        setUsers(users: any[]) {
          this.users = users;
          const totalParticipants = users.length + 1;
          const scale = Math.max(1 - (totalParticipants - 4) * 0.1, 0.6);
          document.documentElement.style.setProperty("--avatar-scale", scale.toString());
        },
        init() {
          this.setupRoom();
        },
        getPositionStyle(index: number, total: number) {
          if (total === 1) {
            // Center the current user's avatar
            return "";
          }

          // Adjust radius based on number of participants
          const baseRadius = 130;
          const radius = baseRadius + (total - 4) * 8; // Increase radius by 8px for each participant beyond 4
          const angle = (2 * Math.PI * index) / total;
          // Subtract half the avatar size (32px) to center each avatar
          const x = radius * Math.cos(angle) - 32;
          const y = radius * Math.sin(angle) - 32;
          return `transform: translate(${x}px, ${y}px);`;
        },
        sendPresence() {
          if (this.socket?.readyState === WebSocket.OPEN) {
            this.socket.send(
              JSON.stringify({
                type: "presence",
                presence: { emoji: this.myPresence.emoji, name: this.myName }
              })
            );
          }
        }
      };
    });
  });
</script>

<style>
  .avatar-circle-container {
    position: relative;
    height: calc(100vh - 256px);
    width: 100%;
    margin: 0 auto;
    overflow: hidden;
  }

  .avatar-item {
    position: absolute;
    top: 50%;
    left: 50%;
    transform-origin: center;
    transition: transform 0.3s ease-out;
    box-shadow: 0 0 11px 4px rgba(255, 255, 255, 0.3);
    border-radius: 99px;
    scale: var(--avatar-scale);
  }

  .avatar-wrapper {
    width: 64px;
    height: 64px;
  }

  .emoji-avatar {
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem; /* Adjust size as needed */
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    backdrop-filter: blur(4px);
  }

  /* Add this new CSS to scale avatars based on participant count */
  [x-data="room"] {
    --avatar-scale: 1;
  }
</style>
