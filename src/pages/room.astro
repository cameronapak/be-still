---
import { Icon } from "astro-iconify";
import Layout from "../layouts/Layout.astro";
---

<Layout title="Room">
  <main x-data="room" class="text-white text-opacity-80 h-full min-h-screen container max-w-md mx-auto py-12">
    <h1 class="text-white text-opacity-80">Quiet Time Together</h1>

    <!-- Add Settings Button -->
    <button class="btn btn-ghost btn-circle absolute top-6 right-6" onclick="settings_modal.showModal()">
      <Icon pack="lucide" name="settings-2" class="h-6 w-6" />
    </button>

    <!-- Add Modal -->
    <dialog
      id="settingsModal"
      x-ref="settingsModalEl"
      x-init="$el.showModal()"
      class="modal modal-bottom sm:modal-middle"
    >
      <div class="modal-box bg-cyan-900">
        <h3 class="font-bold text-xl mb-4 text-white">Welcome here! 👋</h3>
        <div class="space-y-4 mt-4">
          <div>
            <label class="block mb-2">What's your name?</label>
            <input type="text" x-model="myName" class="input input-bordered w-full bg-white bg-opacity-10" />
          </div>
          <div>
            <label class="block mb-2">How are you showing up today?</label>
            <select
              x-model="myPresence.emoji"
              @change="updateEmoji()"
              class="select select-bordered w-full bg-white bg-opacity-10"
            >
              <template x-for="option in emojiOptions" :key="option.value">
                <option :value="option.value" x-text="`${option.value} ${option.label}`"></option>
              </template>
            </select>
          </div>
        </div>
        <div class="modal-action">
          <button class="btn" @click="startQuietTime()">Start Quiet Time</button>
        </div>
      </div>
      <form method="dialog" class="modal-backdrop">
        <button>close</button>
      </form>
    </dialog>

    <div class="avatar-circle-container" id="avatar-container">
      <template x-for="(user, index) in users" :key="user.connectionId">
        <div class="avatar-item" :style="getPositionStyle(index, users.length + 1)">
          <div
            class="tooltip tooltip-bottom animation-gentle-pulse"
            x-bind:data-tip="getTooltipText(user.presence.emoji, user.presence.name)"
          >
            <div class="emoji-avatar" x-text="user.presence.emoji || '😌'"></div>
          </div>
        </div>
      </template>
      <div
        class="avatar-item bg-white bg-opacity-50 rounded-full"
        :style="getPositionStyle(users.length, users.length + 1)"
      >
        <div
          class="tooltip tooltip-bottom animation-gentle-pulse"
          x-bind:data-tip="getTooltipText(myPresence.emoji, myName)"
        >
          <div class="emoji-avatar" x-text="myPresence.emoji || '😌'"></div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import Alpine from "alpinejs";
  import { createClient, type Room } from "@liveblocks/client";

  document.addEventListener("alpine:init", () => {
    Alpine.data("room", function () {
      return {
        emojiOptions: [
          { value: "😌", label: "Content" },
          { value: "😊", label: "Peaceful" },
          { value: "🙏", label: "Praying" },
          { value: "🥺", label: "Seeking" },
          { value: "😢", label: "Grieving" },
          { value: "🙌", label: "Praising" },
          { value: "✨", label: "Blessed" },
          { value: "🤲", label: "Supplication" },
          { value: "😇", label: "Grateful" },
          { value: "🫂", label: "Supporting" },
          { value: "💭", label: "Reflecting" },
          { value: "📖", label: "Reading Scripture" },
          { value: "🎵", label: "Worshiping" },
          { value: "🕯️", label: "Meditating" }
        ],
        startQuietTime() {
          (this.$refs.settingsModalEl as HTMLDialogElement).close();
          this.setupRoom();
        },
        // @ts-ignore
        myName: this.$persist(""),
        getTooltipText(emoji: string, name: string) {
          let text = this.emojiOptions.find((option) => option.value === emoji)?.label || "You";
          if (name) {
            text = `${name} is ${text}`;
          }
          return text;
        },
        setupRoom() {
          const client = createClient({
            publicApiKey: "pk_prod_cILfF_g5rtMsjdKvB5bCqssRzGD-uENYUH3FU8MSpPeFiyWK-ussGjQyNqB4fA1i",
            throttle: 200, //  5 FPS
            lostConnectionTimeout: 5000,
            // Disconnect users after 30 minutes of inactivity
            backgroundKeepAliveTimeout: 30 * 60 * 1000
          });

          const { room, leave } = client.enterRoom("prayer-room");

          room.subscribe("others", (others) => {
            const othersWithPresence = others.filter((user) => user?.presence);
            this.setUsers(othersWithPresence);
          });

          this.room = room;
          this.myPresence = { emoji: "😌", name: "" };
          room.updatePresence({ emoji: "😌", name: "" });
        },
        room: null as Room<any, any, any, any, any> | null,
        myPresence: { emoji: "😌", name: "" } as { emoji: string; name: string },
        updateEmoji() {
          this.room?.updatePresence({ emoji: this.myPresence.emoji, name: this.myName });
        },
        users: [] as any[],
        setUsers(users: any[]) {
          this.users = users;
          // Calculate scale based on total participants (including current user)
          const totalParticipants = users.length + 1;
          const scale = Math.max(1 - (totalParticipants - 4) * 0.1, 0.6);
          // Update the CSS custom property
          document.documentElement.style.setProperty("--avatar-scale", scale.toString());
          this.room?.updatePresence({ emoji: this.myPresence.emoji, name: this.myName });

          this.$watch("myName", (value) => {
            this.room?.updatePresence({ emoji: this.myPresence.emoji, name: value });
          });
        },
        getPositionStyle(index: number, total: number) {
          // Adjust radius based on number of participants
          const baseRadius = 130;
          const radius = baseRadius + (total - 4) * 8; // Increase radius by 20px for each participant beyond 4
          const angle = (2 * Math.PI * index) / total;
          const x = radius * Math.cos(angle);
          const y = radius * Math.sin(angle);
          return `transform: translate(${x}px, ${y}px);`;
        }
      };
    });
  });
</script>

<style>
  .avatar-circle-container {
    position: relative;
    height: calc(100vh - 256px);
    width: calc(100vh - 256px);
    margin: 0 auto;
  }

  .avatar-item {
    position: absolute;
    top: 50%;
    left: 50%;
    transform-origin: center;
    transition: transform 0.3s ease-out;
    box-shadow: 0 0 11px 4px rgba(255, 255, 255, 0.3);
    border-radius: 99px;
    scale: var(--avatar-scale);
  }

  .avatar-wrapper {
    width: 64px;
    height: 64px;
  }

  .emoji-avatar {
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 2.5rem; /* Adjust size as needed */
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    backdrop-filter: blur(4px);
  }

  /* Add this new CSS to scale avatars based on participant count */
  [x-data="room"] {
    --avatar-scale: 1;
  }
</style>
